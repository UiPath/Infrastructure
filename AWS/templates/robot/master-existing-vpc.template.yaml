AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates a Multi-AZ, multi-subnet VPC infrastructure with UIPath
  Orchestrator deployed in private Subnets, with an ALB behind a Route53 in
  public subnets. (qs-1r2g4121j)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - SubnetId
          - SecurityGroup
      - Label:
          default: Robot VM Configuration
        Parameters:
          - KeyPairName
          - InstanceType
      - Label:
          default: UiPath Robot Configuration
        Parameters:
          - RobotRole
          - UiRobotName
          - UiRobotPassword
          - LocalVMName
          - UiRobotType
          - OrchestratorURL
          - OrchestratorTenant
          - OrchestratorAPIUser
          - OrchestratorAPIPassword
      - Label:
          default: Quickstart Bucket configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      SubnetId:
        default: Existing subnet.
      SecurityGroup:
        default: Existing SecurityGroup.
      KeyPairName:
        default: Instance Key pair
      InstanceType:
        default: Instance type
      RobotRole:
        default: UiPath Robot local account role.
      UiRobotName:
        default: UiPath Robot local account username.
      UiRobotPassword:
        default: UiPath Robot local account password.
      LocalVMName:
        default: Local VM name.
      UiRobotType:
        default: 'Robot type : Attended, Unattended, Development or Nonproduction.'
      OrchestratorURL:
        default: URL of an existing and licensed Orchestrator.
      OrchestratorTenant:
        default: Tenant name where the Robot will be created.
      OrchestratorAPIUser:
        default: Orchestrator API username with role to create/add Robot.
      OrchestratorAPIPassword:
        default: Orchestrator API password.s
      QSS3BucketName:
        default: Template hosting Bucket
      QSS3KeyPrefix:
        default: Template folder
Parameters:
  SubnetId:
    Type: 'AWS::EC2::Subnet::Id'
    Description: >-
      SubnetId of an existing subnet in your existing Virtual Private Cloud
      (VPC).
    ConstraintDescription: Must be an existing subnet in the selected Virtual Private Cloud.
  SecurityGroup:
    Description: ID of an existing SecurityGroup.
    Type: 'AWS::EC2::SecurityGroup::Id'
  KeyPairName:
    Description: 'Existing Key Pair, which is to be used to Log in to VM instances.'
    Type: 'AWS::EC2::KeyPair::KeyName'
  InstanceType:
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
    ConstraintDescription: 'Class of instance, must be a valid EC2 instance type from the list.'
    Default: t2.medium
    Description: EC2 instance type
    Type: String
  RobotRole:
    Type: String
    Default: localuser
    AllowedValues:
      - localuser
      - localadmin
    Description: >-
      Choose a role for the Robot application: localuser only for RDP permission
      or localadmin for Administrator permission. Default is localuser.
  UiRobotName:
    Description: UiPath Robot name.
    Type: String
    Default: awesome.robot
  UiRobotPassword:
    Description: UiPath Robot password
    Type: String
    NoEcho: 'true'
  LocalVMName:
    Description: Local VM name.
    Type: String
    Default: awesomerobot01
  UiRobotType:
    Type: String
    Default: Attended
    AllowedValues:
      - Attended
      - Unattended
      - Development
      - Nonproduction
    Description: 'Robot type : Attended, Unattended, Development or Nonproduction.'
  OrchestratorURL:
    Type: String
    Description: URL of an existing and licensed Orchestrator.
  OrchestratorTenant:
    Type: String
    Default: default
    Description: Tenant name where the Robot will be created.
  OrchestratorAPIUser:
    Type: String
    Description: Orchestrator API username with role to create/add Robot.
  OrchestratorAPIPassword:
    Type: String
    Description: Orchestrator API password.
    NoEcho: 'true'
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Description: S3 bucket name hosting the Quickstart templates.
    Type: String
    Default: aws-quickstart
  QSS3BucketRegion:
    Default: eu-central-1
    Description: >-
      The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted.
      When using your own bucket, you must specify this value.
    Type: String
    AllowedPattern: (us(-gov)?|ap|ca|cn|eu|sa)-(central|(north|south)?(east|west)?)-\d
    ConstraintDescription: Quick Start bucket region must be a valid AWS Region code.
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*/$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, and hyphens (-), and ending with a slash(/).
    Default: quickstart-uipath/
    Description: S3 key prefix under which Quick Start templates are hosted.
    Type: String
Conditions:
  UsingDefaultBucket: !Equals 
    - !Ref QSS3BucketName
    - aws-quickstart
Resources:
  LambdaRoleStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 
        - >-
          https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/robot/lambda-role.template.yaml
        - S3Bucket: !If 
            - UsingDefaultBucket
            - !Sub '${QSS3BucketName}-${AWS::Region}'
            - !Ref QSS3BucketName
          S3Region: !If 
            - UsingDefaultBucket
            - !Ref 'AWS::Region'
            - !Ref QSS3BucketRegion
  FindAMIFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Finds a matching AMI Id
      Handler: index.handler
      Role: !GetAtt 
        - LambdaRoleStack
        - Outputs.CustomLambdaRoleArn
      Code:
        ZipFile: !Join 
          - |+

          - - import boto3
            - import json
            - import cfnresponse
            - 'def create(properties, physical_id):'
            - '    regionName = properties[''RegionName'']'
            - '    imageName = properties[''ImageName'']'
            - '    architecture = properties[''Architecture'']'
            - '    virtualizationType = properties[''VirtualizationType'']'
            - '    owners = properties[''Owners'']'
            - '    imageId = '''''
            - '    ec2 = boto3.client(''ec2'', regionName)'
            - '    images = ec2.describe_images('
            - '        ExecutableUsers=[''all''],'
            - '        Filters=['
            - '            { ''Name'': ''name'', ''Values'': [imageName] },'
            - '            { ''Name'': ''state'', ''Values'': [''available''] },'
            - '            { ''Name'': ''architecture'', ''Values'': [architecture] },'
            - '            { ''Name'': ''virtualization-type'', ''Values'': [virtualizationType] }'
            - '        ],'
            - '        Owners=[owners]'
            - '    )[''Images'']'
            - '    if len(images) > 0:'
            - '        imageId = images[0][''ImageId'']'
            - '    print(regionName, imageId)'
            - '    returnAttribute = {}'
            - '    returnAttribute[''ImageId''] = imageId'
            - '    returnAttribute[''Action''] = ''CREATE'''
            - '    return cfnresponse.SUCCESS, imageId, returnAttribute'
            - 'def update(properties, physical_id):'
            - '    imageId = physical_id'
            - '    returnAttribute = {}'
            - '    returnAttribute[''ImageId''] = imageId'
            - '    returnAttribute[''Action''] = ''UPDATE'''
            - '    return cfnresponse.SUCCESS, imageId, returnAttribute'
            - 'def delete(properties, physical_id):'
            - '    imageId = physical_id'
            - '    returnAttribute = {}'
            - '    returnAttribute[''ImageId''] = imageId'
            - '    returnAttribute[''Action''] = ''DELETE'''
            - '    return cfnresponse.SUCCESS, imageId, returnAttribute'
            - 'def handler(event, context):'
            - '    print(''Received event: '' + json.dumps(event))'
            - '    status = cfnresponse.FAILED'
            - '    new_physical_id = None'
            - '    returnAttribute = {}'
            - '    try:'
            - '        properties = event.get(''ResourceProperties'')'
            - '        physical_id = event.get(''PhysicalResourceId'')'
            - '        status, new_physical_id, returnAttribute = {'
            - '            ''Create'': create,'
            - '            ''Update'': update,'
            - '            ''Delete'': delete'
            - '        }.get(event[''RequestType''], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)'
            - '    except Exception as e:'
            - '        print(''Exception: '' + str(e))'
            - '        status = cfnresponse.FAILED'
            - '    finally:'
            - '        cfnresponse.send(event, context, status, returnAttribute, new_physical_id)'
      Runtime: python3.6
      Timeout: 600
      TracingConfig:
        Mode: Active
  ServerStack:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: !Sub 
        - >-
          https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/robot/server.template.yaml
        - S3Bucket: !If 
            - UsingDefaultBucket
            - !Sub '${QSS3BucketName}-${AWS::Region}'
            - !Ref QSS3BucketName
          S3Region: !If 
            - UsingDefaultBucket
            - !Ref 'AWS::Region'
            - !Ref QSS3BucketRegion
      Parameters:
        PrivateSubnetIDs: !Ref SubnetId
        GatewaySecurityGroup: !Ref SecurityGroup
        KeyPairName: !Ref KeyPairName
        InstanceType: !Ref InstanceType
        FindAMIFunctionArn: !GetAtt 
          - FindAMIFunction
          - Arn
        RobotRole: !Ref RobotRole
        UiRobotName: !Ref UiRobotName
        UiRobotPassword: !Ref UiRobotPassword
        LocalVMName: !Ref LocalVMName
        UiRobotType: !Ref UiRobotType
        OrchestratorURL: !Ref OrchestratorURL
        OrchestratorTenant: !Ref OrchestratorTenant
        OrchestratorAPIUser: !Ref OrchestratorAPIUser
        OrchestratorAPIPassword: !Ref OrchestratorAPIPassword
Outputs:
  UiPathRobotPrivateIP:
    Description: Private IP of UiPathRobot in Public Subnet 1
    Value: !GetAtt 
      - ServerStack
      - Outputs.UiPathRobotPrivateIP
    Export:
      Name: !Sub '${AWS::StackName}-UiPathRobotPrivateIP'
